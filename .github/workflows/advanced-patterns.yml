# ===================================================
# ADVANCED PATTERNS WORKFLOW EXAMPLE - MODULE 4
# ===================================================
# LEARNING OBJECTIVES:
# - Understand fan-out/fan-in pattern
# - Learn job dependencies
# - See conditional job execution
# - Implement workflow orchestration
# ===================================================

name: Advanced Workflow Patterns

on:
  # Manual trigger for easy testing
  workflow_dispatch:
  
  # Automatic trigger on push to main
  push:
    branches: [main]

jobs:
  # ===================================================
  # PATTERN 1: SETUP JOB
  # ===================================================
  # LEARNING POINT: The setup job runs first and prepares everything needed
  # for the parallel test jobs. This is the starting point of the fan-out pattern.
  prepare:
    name: Prepare Test Data
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # LEARNING POINT: In a real scenario, this step might generate test data,
      # build artifacts, or prepare the environment for testing
      - name: Generate test data
        run: |
          echo "Preparing test environment..."
          echo "Test data generated successfully!"

  # ===================================================
  # PATTERN 2: FAN-OUT (PARALLEL JOBS)
  # ===================================================
  # LEARNING POINT: Multiple test jobs that depend on the prepare job.
  # These jobs run in parallel, demonstrating the "fan-out" pattern.
  # Each job focuses on a different type of test.
  test-unit:
    name: Unit Tests
    # LEARNING POINT: The 'needs' keyword creates a dependency on the prepare job.
    # This job will only start after the prepare job completes successfully.
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # LEARNING POINT: This job always succeeds, simulating passing unit tests
      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          echo "Unit tests passed!"

  test-integration:
    name: Integration Tests
    # LEARNING POINT: This job also depends on the prepare job
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # LEARNING POINT: This job randomly passes or fails, demonstrating
      # how workflows handle both success and failure scenarios
      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          
          # Generate and print a random number
          RANDOM_NUM=$((RANDOM % 2))
          echo "Random number generated: $RANDOM_NUM (0=pass, 1=fail)"
          
          # Randomly pass or fail
          if [[ $RANDOM_NUM -eq 0 ]]; then
            echo "Integration tests passed!"
          else
            echo "Integration tests failed!"
            exit 1  # Non-zero exit code causes the job to fail
          fi

  test-e2e:
    name: End-to-End Tests
    # LEARNING POINT: This job also depends on the prepare job
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # LEARNING POINT: This job always succeeds, simulating passing E2E tests
      - name: Run E2E tests
        run: |
          echo "Running end-to-end tests..."
          echo "End-to-end tests passed!"

  # ===================================================
  # PATTERN 3: FAN-IN (AGGREGATION)
  # ===================================================
  # LEARNING POINT: The report job depends on all test jobs and aggregates
  # their results. This demonstrates the "fan-in" pattern where multiple
  # parallel jobs converge into a single job.
  report:
    name: Test Report
    # LEARNING POINT: This job depends on all three test jobs
    needs: [test-unit, test-integration, test-e2e]
    runs-on: ubuntu-latest
    # LEARNING POINT: The 'always()' function ensures this job runs even if
    # some of the test jobs fail. This is crucial for the fan-in pattern.
    if: always()
    steps:
      # LEARNING POINT: This step collects and reports results from all test jobs
      - name: Generate test report
        run: |
          echo "Generating test report..."
          echo "Test Results Summary:"
          echo "====================="
          
          # LEARNING POINT: Access the result of each job using needs.<job-id>.result
          echo "Unit Tests: ${{ needs.test-unit.result }}"
          echo "Integration Tests: ${{ needs.test-integration.result }}"
          echo "E2E Tests: ${{ needs.test-e2e.result }}"
          
          # LEARNING POINT: Determine overall status based on all test results
          if [[ "${{ needs.test-unit.result }}" == "success" && 
                "${{ needs.test-integration.result }}" == "success" && 
                "${{ needs.test-e2e.result }}" == "success" ]]; then
            echo "✅ All tests passed!"
          else
            echo "❌ Some tests failed!"
          fi

  # ===================================================
  # PATTERN 4: CONDITIONAL EXECUTION
  # ===================================================
  # LEARNING POINT: These deployment jobs demonstrate conditional execution
  # based on the results of previous jobs.
  deploy-staging:
    name: Deploy to Staging
    # LEARNING POINT: This job depends on all test jobs and the report job
    needs: [test-unit, test-integration, test-e2e, report]
    runs-on: ubuntu-latest
    # LEARNING POINT: The 'always()' function ensures this job always runs,
    # demonstrating a common pattern where staging deployments happen regardless
    # of test results for verification purposes.
    if: always()
    steps:
      # LEARNING POINT: Simulates deploying to a staging environment
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Staging deployment successful!"

  deploy-production:
    name: Deploy to Production
    # LEARNING POINT: This job also depends on all test jobs and the report job
    needs: [test-unit, test-integration, test-e2e, report]
    runs-on: ubuntu-latest
    # LEARNING POINT: This conditional ensures production deployment only happens
    # if ALL tests pass, demonstrating a safety mechanism for production environments.
    if: |
      needs.test-unit.result == 'success' && 
      needs.test-integration.result == 'success' && 
      needs.test-e2e.result == 'success'
    steps:
      # LEARNING POINT: Simulates deploying to a production environment
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Production deployment successful!"

# ===================================================
# LEARNING NOTES:
# ===================================================
# 1. Fan-out/fan-in pattern:
#    - Single prepare job (setup)
#    - Multiple test jobs run in parallel (fan-out)
#    - Report job collects results (fan-in)
# 2. Job dependencies using 'needs':
#    - Creates a directed acyclic graph (DAG) of job execution
#    - Enables complex workflow orchestration
# 3. Conditional execution with if statements:
#    - Control which jobs run based on conditions
#    - Access job results with needs.<job-id>.result
# 4. The 'always()' function:
#    - Ensures jobs run regardless of previous job status
#    - Essential for reporting and cleanup tasks
# 5. Different deployment strategies:
#    - Staging: Deploy always for verification
#    - Production: Deploy only when all tests pass
# 6. Exit codes in steps:
#    - Zero exit code (0) indicates success
#    - Non-zero exit code indicates failure
# ===================================================
