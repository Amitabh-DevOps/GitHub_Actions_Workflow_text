# ===================================================
# ADVANCED PATTERNS WORKFLOW EXAMPLE - MODULE 4
# ===================================================
# LEARNING OBJECTIVES:
# - Understand fan-out/fan-in pattern
# - Learn job dependencies and outputs
# - See conditional job execution
# - Implement job output sharing
# ===================================================

name: Advanced Workflow Patterns

on:
  # Manual trigger for easy testing
  workflow_dispatch:
  
  # Automatic trigger on push to main
  push:
    branches: [main]

jobs:
  # ===================================================
  # PATTERN 1: FAN-OUT (PARALLEL EXECUTION)
  # ===================================================
  # LEARNING POINT: Separate jobs for different test types
  unit-test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    # LEARNING POINT: Each job produces an output
    outputs:
      status: ${{ steps.run-tests.outputs.status }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run unit tests
        id: run-tests
        run: |
          echo "Running unit tests..."
          echo "Unit tests passed!"
          echo "status=passed" >> $GITHUB_OUTPUT

  integration-test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    # LEARNING POINT: Allow the workflow to continue even if this test fails
    continue-on-error: true
    # LEARNING POINT: Each job produces an output
    outputs:
      status: ${{ steps.run-tests.outputs.status }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run integration tests
        id: run-tests
        run: |
          echo "Running integration tests..."
          
          # Randomly pass or fail
          if [[ $RANDOM -gt 16000 ]]; then
            echo "Integration tests passed!"
            echo "status=passed" >> $GITHUB_OUTPUT
          else
            echo "Integration tests passed!"
            echo "status=passed" >> $GITHUB_OUTPUT
          fi

  e2e-test:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    # LEARNING POINT: Allow the workflow to continue even if this test fails
    continue-on-error: true
    # LEARNING POINT: Each job produces an output
    outputs:
      status: ${{ steps.run-tests.outputs.status }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run E2E tests
        id: run-tests
        run: |
          echo "Running E2E tests..."
          echo "E2E tests failed!"
          echo "status=failed" >> $GITHUB_OUTPUT
          # Force an error to ensure this job fails
          exit 1

  # ===================================================
  # PATTERN 2: FAN-IN (RESULT AGGREGATION)
  # ===================================================
  report:
    name: Aggregate Test Results
    # LEARNING POINT: This job runs after all test jobs complete
    needs: [unit-test, integration-test, e2e-test]
    runs-on: ubuntu-latest
    # LEARNING POINT: Run even if some tests failed
    if: always()
    
    steps:
      # LEARNING POINT: Access outputs from all test jobs
      - name: Collect test results
        run: |
          echo "Collecting test results from all jobs..."
          
          echo "Test results summary:"
          echo "---------------------"
          echo "Unit tests: ${{ needs.unit-test.outputs.status }}"
          echo "Integration tests: ${{ needs.integration-test.outputs.status }}"
          echo "E2E tests: ${{ needs.e2e-test.outputs.status }}"
          
          # Check if any job failed
          if [[ "${{ needs.e2e-test.result }}" == "failure" ]]; then
            echo "❌ E2E tests failed"
          else
            echo "✅ All tests passed"
          fi

  # ===================================================
  # PATTERN 3: CONDITIONAL EXECUTION
  # ===================================================
  deploy-staging:
    name: Deploy to Staging
    needs: [unit-test, integration-test, e2e-test, report]
    runs-on: ubuntu-latest
    # LEARNING POINT: Always deploy to staging, even if tests fail
    if: always()
    
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Staging deployment successful!"

  deploy-production:
    name: Deploy to Production
    needs: [unit-test, integration-test, e2e-test, report]
    runs-on: ubuntu-latest
    # LEARNING POINT: Only deploy to production if all tests pass
    if: |
      needs.unit-test.result == 'success' && 
      needs.integration-test.result == 'success' && 
      needs.e2e-test.result == 'success'
    
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Production deployment successful!"

# ===================================================
# LEARNING NOTES:
# ===================================================
# 1. Fan-out/fan-in pattern allows parallel execution followed by result aggregation
# 2. Separate jobs can run in parallel without using a matrix
# 3. Job outputs can be shared between jobs using needs.<job>.outputs
# 4. continue-on-error allows the workflow to proceed even when tests fail
# 5. Conditional execution controls when jobs should run
# 6. The 'always()' function ensures jobs run regardless of previous job status
# 7. The 'needs' keyword creates job dependencies
# ===================================================
