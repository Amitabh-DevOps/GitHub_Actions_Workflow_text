# ===================================================
# ADVANCED PATTERNS WORKFLOW EXAMPLE - MODULE 4
# ===================================================
# LEARNING OBJECTIVES:
# - Understand fan-out/fan-in pattern
# - Learn job dependencies
# - See conditional job execution
# - Implement workflow orchestration
# ===================================================

name: Advanced Workflow Patterns

on:
  # Manual trigger for easy testing
  workflow_dispatch:
  
  # Automatic trigger on push to main
  push:
    branches: [main]

jobs:
  # ===================================================
  # PATTERN 1: SETUP JOB
  # ===================================================
  prepare:
    name: Prepare Test Data
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate test data
        run: |
          echo "Preparing test environment..."
          echo "Test data generated successfully!"

  # ===================================================
  # PATTERN 2: FAN-OUT (PARALLEL JOBS)
  # ===================================================
  test-unit:
    name: Unit Tests
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          echo "Unit tests passed!"

  test-integration:
    name: Integration Tests
    needs: prepare
    runs-on: ubuntu-latest
    # Allow workflow to continue even if this job fails
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # Randomly pass or fail
          if [[ $((RANDOM % 2)) -eq 0 ]]; then
            echo "Integration tests passed!"
          else
            echo "Integration tests failed!"
            exit 1
          fi

  test-e2e:
    name: End-to-End Tests
    needs: prepare
    runs-on: ubuntu-latest
    # Allow workflow to continue even if this job fails
    # continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run E2E tests
        run: |
          echo "Running end-to-end tests..."
          echo "End-to-end tests failed!"
          # exit 1

  # ===================================================
  # PATTERN 3: FAN-IN (AGGREGATION)
  # ===================================================
  report:
    name: Test Report
    needs: [test-unit, test-integration, test-e2e]
    runs-on: ubuntu-latest
    # Run this job even if some tests failed
    if: always()
    steps:
      - name: Generate test report
        run: |
          echo "Generating test report..."
          echo "Test Results Summary:"
          echo "====================="
          
          # Check results of each test job
          echo "Unit Tests: ${{ needs.test-unit.result }}"
          echo "Integration Tests: ${{ needs.test-integration.result }}"
          echo "E2E Tests: ${{ needs.test-e2e.result }}"
          
          # Overall status
          if [[ "${{ needs.test-unit.result }}" == "success" && 
                "${{ needs.test-integration.result }}" == "success" && 
                "${{ needs.test-e2e.result }}" == "success" ]]; then
            echo "✅ All tests passed!"
          else
            echo "❌ Some tests failed!"
          fi

  # ===================================================
  # PATTERN 4: CONDITIONAL EXECUTION
  # ===================================================
  deploy-staging:
    name: Deploy to Staging
    needs: [test-unit, test-integration, test-e2e, report]
    runs-on: ubuntu-latest
    # Always deploy to staging, even if some tests failed
    if: always()
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Staging deployment successful!"

  deploy-production:
    name: Deploy to Production
    needs: [test-unit, test-integration, test-e2e, report]
    runs-on: ubuntu-latest
    # Only deploy to production if all tests passed
    if: |
      needs.test-unit.result == 'success' && 
      needs.test-integration.result == 'success' && 
      needs.test-e2e.result == 'success'
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Production deployment successful!"

# ===================================================
# LEARNING NOTES:
# ===================================================
# 1. Fan-out/fan-in pattern:
#    - Single prepare job (setup)
#    - Multiple test jobs run in parallel (fan-out)
#    - Report job collects results (fan-in)
# 2. Job dependencies using 'needs'
# 3. continue-on-error allows the workflow to proceed even when tests fail
# 4. Conditional execution with if statements
# 5. The 'always()' function ensures jobs run regardless of previous job status
# 6. Different deployment strategies based on test results
# ===================================================
