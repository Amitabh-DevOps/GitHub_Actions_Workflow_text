# ===================================================
# ADVANCED PATTERNS WORKFLOW EXAMPLE - MODULE 4
# ===================================================
# LEARNING OBJECTIVES:
# - Understand fan-out/fan-in pattern
# - Learn dynamic matrix generation
# - See conditional job execution
# - Implement job output sharing
# ===================================================

name: Advanced Workflow Patterns

on:
  # Manual trigger for easy testing
  workflow_dispatch:
  
  # Automatic trigger on push to main
  push:
    branches: [main]

jobs:
  # ===================================================
  # PATTERN 1: DYNAMIC MATRIX GENERATION
  # ===================================================
  discover:
    name: Discover Test Suites
    runs-on: ubuntu-latest
    # LEARNING POINT: This job discovers what needs to be tested
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    
    steps:
      - uses: actions/checkout@v4
      
      # LEARNING POINT: Dynamically generate a matrix based on repository content
      - name: Find test directories
        id: set-matrix
        run: |
          echo "Finding test suites..."
          
          # For demonstration, we'll use a simple hardcoded matrix
          # In a real scenario, you might scan directories or query an API
          echo 'matrix={"test":["unit","integration"]}' >> $GITHUB_OUTPUT
          
          echo "Matrix generated!"

  # ===================================================
  # PATTERN 2: FAN-OUT (PARALLEL EXECUTION)
  # ===================================================
  test:
    name: Run ${{ matrix.test }} tests
    needs: discover
    runs-on: ubuntu-latest
    # LEARNING POINT: Use dynamically generated matrix
    strategy:
      # LEARNING POINT: This creates parallel jobs for each test type
      matrix: ${{ fromJson(needs.discover.outputs.matrix) }}
    
    # LEARNING POINT: Each job produces an output
    outputs:
      result: ${{ steps.run-tests.outputs.result }}
    
    steps:
      - uses: actions/checkout@v4
      
      # LEARNING POINT: Different steps based on test type
      - name: Run ${{ matrix.test }} tests
        id: run-tests
        run: |
          echo "Running ${{ matrix.test }} tests..."
          
          # Simulate test execution
          sleep 2
          
          # For demonstration, all tests pass
          echo "Tests passed!"
          echo "result=passed" >> $GITHUB_OUTPUT

  # ===================================================
  # PATTERN 3: FAN-IN (RESULT AGGREGATION)
  # ===================================================
  report:
    name: Aggregate Test Results
    # LEARNING POINT: This job runs after all test jobs complete
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      # LEARNING POINT: Access outputs from all matrix combinations
      - name: Collect test results
        run: |
          echo "Collecting test results from all jobs..."
          echo "All tests completed successfully!"

  # ===================================================
  # PATTERN 4: CONDITIONAL EXECUTION
  # ===================================================
  deploy:
    name: Conditional Deployment
    needs: [test, report]
    runs-on: ubuntu-latest
    # LEARNING POINT: Only run on push to main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy
        run: |
          echo "Deploying to production..."
          echo "Deployment successful!"

# ===================================================
# LEARNING NOTES:
# ===================================================
# 1. Fan-out/fan-in pattern allows parallel execution followed by result aggregation
# 2. Dynamic matrix generation creates flexible parallel jobs
# 3. Job outputs can be shared between jobs using needs.<job>.outputs
# 4. Conditional execution controls when jobs should run
# 5. The 'needs' keyword creates job dependencies
# ===================================================
